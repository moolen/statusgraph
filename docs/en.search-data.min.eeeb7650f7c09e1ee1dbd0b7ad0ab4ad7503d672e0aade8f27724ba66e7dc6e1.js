'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/statusgraph/docs/configuration/','title':"Configuration",'content':"Configuration This section is a reference for the command-line interface, usage of environment variable and config.yaml file. Statusgraph has a simple client-server architecture. The Server serves the SPA Frontend, stores the graph data on disk and proxies metrics request to prometheus.\nCLI The server serves the Webapp and is the API Server that stores the graph information and issues requests towards prometheus/alertmanager.\nUsage: statusgraph server [flags] Flags: --config string path to the config file which contains the server configuration (default \u0026quot;/etc/statusgraph/config.yaml\u0026quot;) --data-dir string path to the data dir (default \u0026quot;/data\u0026quot;) -h, --help help for server --static-dir string path to the static dir (default \u0026quot;/www\u0026quot;) Global Flags: --loglevel string set the loglevel (default \u0026quot;info\u0026quot;) Overview This config file has three main purposes:\n specify connection information for prometheus and alertmanager define how statusgraph selects alerts and how to map them to a graph node fetch metrics from prometheus and how to map them to a graph node  Example See the following annotated config example for further explanation.\nupstream: prometheus: # you can use http basic auth here in the form of http://user:pass@example.com url: http://localhost:9090 alertmanager: url: http://localhost:9093 mapping: # this defines which alerts we display and how to find the correpsonding graph node # use a `label_selector` to filter for specific alerts # and `service_labels` and `service_annotations` to specify to which graph node this alert belongs alerts: label_selector: - severity: \u0026#34;critical\u0026#34; - severity: \u0026#34;warning\u0026#34; important: \u0026#34;true\u0026#34; # red \u0026amp; green lamp indicator # Use this if your alerts use a specific label for a service (e.g. app=frontend / app=backend ...) # this tells statusgraph to map alerts to nodes using the following labels/annotations service_labels: - \u0026#34;service_id\u0026#34; service_annotations: - \u0026#34;statusgraph-node\u0026#34; metrics: # green lamp indicator! # this helps statusgraph to find all existing services by fetching the label values # reference: https://prometheus.io/docs/prometheus/latest/querying/api/#querying-label-values service_labels: - \u0026#39;service_id\u0026#39; queries: # just as an example - name: cpu wait query: sum(rate(node_pressure_cpu_waiting_seconds_total[1m])) by (service_id) * 100 service_label: service_id "});index.add({'id':1,'href':'/statusgraph/docs/getting_started/','title':"Getting Started",'content':"Getting Started What is Statusgraph? Statusgraph is the status page for your distributed system. It lets you visualize components and dependencies of your system and indicates their status.\nConceptually, you want to know if your service is \u0026ldquo;running\u0026rdquo;, i.e. it is in a binary state: red lamp vs. green lamp. This question is incredibly hard to answer. Statusgraph takes this approach:\n define alerts in Prometheus. They tell us when a services is considered in a \u0026ldquo;red\u0026rdquo; state (service is dead / not available / has issues ..). tell statusgraph how to lookup services (services is in the \u0026ldquo;green\u0026rdquo; state) map metrics to services  You can visualize many different aspects of your environment.\n 10.000ft view of your distributed system self-contained system of a single team (a bunch of services, databases) network aspects: CDN, DNS \u0026amp; Edge services end-user view: edge services, blackbox tests Data engineering pipeline: visualize DAGs / ETL Metrics  High-Level Architecture Installation BEWARE: state is currently stored on disk (a bunch of json files). HA setup is not yet supported.\nPrerequisites  alertmanager v0.20.0 and above prometheus  Docker Docker Images are available on quay.io: quay.io/moolen/statusgraph:latest.\n$ docker run -it -p 8000:8000 quay.io/moolen/statusgraph:latest server Kubernetes, Kustomize \u0026amp; Helm This repository contains kustomize manifests. See config/default directory:\n$ git clone git@github.com:moolen/statusgraph.git $ cd statusgraph/ $ kubectl apply -k config/default Helm is not supported. Feel free to contribute.\nFrom Source You can build statusgraph from source yourself. You need a working go 1.14 environment and node environment.\n$ git clone git@github.com:moolen/statusgraph.git # build standalone client/server $ make client # builds client bundle at ./client/dist $ make binary # builds server binary at ./bin/statusgraph # build docker image $ make docker-build IMG=docker.io/foobar/statusgraph:dev Next steps You may want to check out the the Usage Examples or Configuration.\n"});index.add({'id':2,'href':'/statusgraph/docs/usage/','title':"Usage",'content':"Usage examples Tutorial use-case: colorizing the nodes Let\u0026rsquo;s take a look at the following very simple graph:\n[frontend] --\u0026gt; [backend] Both services expose a metric http_request_latency_seconds:mean5m with labels app=frontend and app=backend.\nAnd let\u0026rsquo;s consider the following Alert rule as an real life™ example.\ngroups: - name: Backend rules: - alert: HighRequestLatency expr: http_request_latency_seconds:mean5m{app=\u0026#34;backend\u0026#34;} \u0026gt; 0.5 for: 10m labels: severity: critical # \u0026lt;--- we only want to display alerts with severity=critical service_id: backend # \u0026lt;--- this is a node in our graph annotations: summary: High request latency The following mapping does this:\n only take alerts with severity=critical into consideration and the value of label service_id points to a node in our graph  endpoints: {} # ... metrics: {} # ... mapping: alerts: label_selector: - severity: \u0026#34;critical\u0026#34; service_labels: - \u0026#34;service_id\u0026#34; When this alert is firing, the backend will be red. pretty straight forward. When the alert is NOT firing the backend will be green.\nThe frontend though will not be colorized in any way because there is no mapping for it.\nHow can we get this service green then? No, you don\u0026rsquo;t have to define an alert for each service explicitly (tho you can do it of course!). What you need is a common label that has all the available services as values. If you configured prometheus properly™ you have those labels already. In this tutorial we have http_request_latency_seconds:mean5m with labels app=frontend and app=backend (see above).\nUse the mapping.metrics.service_labels[] config to tell statusgraph to lookup all values for label app.\nendpoints: {} # ... metrics: {} # ... mapping: metrics: service_labels: - app If you don\u0026rsquo;t have these labels yet, configure metric re-labeling (see here and here). As a last resort you can consider using label_replace with recorded rules.\nMatching multiple nodes in a graph Complex systems fail in complex ways. For example, a http request may fail during DNS resolution, when doing a TCP handshake or if the wrong HTTP status code is sent from the server. Thus, a simple alert may affect multiple nodes in the graph depending on your level abstraction.\nThis use-case is supported using csv in label values (yes, it\u0026rsquo;s hacky. but that\u0026rsquo;s how the prom spec is):\ngroups: - name: Backend rules: - alert: StupidHooman expr: all_cables_unplugged \u0026gt; 0 for: 5m labels: severity: critical service_id: frontend,backend # use this to colorize 2 graph nodes at the same time annotations: summary: High request latency Generic Alerts You can define generic alerts which re-use labels of a metric that\ngroups: - name: Backend rules: - alert: HighRequestLatency expr: http_request_latency_seconds:mean5m{app=\u0026#34;backend\u0026#34;} \u0026gt; 0.5 for: 10m labels: severity: critical # \u0026lt;--- we only want to display alerts with severity=critical service_id: \u0026#34;{{ $labels.service_id }}\u0026#34; # \u0026lt;--- this is a node in our graph annotations: summary: High request latency "});index.add({'id':3,'href':'/statusgraph/docs/','title':"Docs",'content':""});})();